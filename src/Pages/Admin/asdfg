// import React, { useState, useEffect } from "react";
// import { getCategory } from "../../Api/apiservices";

// const Billing = () => {
//   const [categories, setCategories] = useState([]);
//   const [products, setProducts] = useState([]);
//   const [isInputDisabled, setIsInputDisabled] =useState(false);

//   const [selectedCategory, setSelectedCategory] = useState("");
//   const [invoiceDetails, setInvoiceDetails] = useState([]);
//   const [modalOpen, setModalOpen] = useState(false);
//   const [formData, setFormData] = useState({
//     phoneNumber: "",
//     customerName: "",
//     dateTime: new Date().toLocaleString(),
//   });
//   const calculateAmount = (quantity, sellingPrice) => { 
//     return quantity * sellingPrice;
//   }

//   // Mock data
//   // const mockCategories = [
//   //   { id: "cat1", name: "Pharmacy" },
//   //   { id: "cat2", name: "Cosmetics" },
//   // ];

//   const mockProducts = {
//     cat1: [
//       { id: "prod1", name: "Paracetamol", batchNo: "B123", expDate: "2025-12-31", mrp: 50, gst: 5, sellingPrice: 45 },
//       { id: "prod2", name: "Ibuprofen", batchNo: "B456", expDate: "2024-06-30", mrp: 100, gst: 10, sellingPrice: 90 },
//     ],
//     cat2: [
//       { id: "prod3", name: "Lipstick", batchNo: "B789", expDate: "2026-05-15", mrp: 200, gst: 18, sellingPrice: 180 },
//       { id: "prod4", name: "Foundation", batchNo: "B101", expDate: "2027-01-20", mrp: 300, gst: 20, sellingPrice: 270 },
//     ],
//   };

//   const mockInvoiceData = [
//     { phoneNumber: "1234567890", customerName: "John Doe" },
//     { phoneNumber: "9876543210", customerName: "Jane Smith" },
//   ];



//     useEffect(() => {
//           const fetchCategories = async () => {
//             try {
//               const mockCategories = await getCategory();
//               setCategories(mockCategories.data);
//             } catch (error) {
//               console.error("Error setting static categories:", error.message || error);
//             }
//           };
//           fetchCategories();
//         }, []);
//         console.log("Fetched categories",categories);

//         const handleCategoryChange = async (e) => {
//           const selectedCategoryId = e.target.value;
//           setSelectedCategory(selectedCategoryId);
        
//           if (selectedCategoryId) {
//             try {
//               const response = await productlistByID(selectedCategoryId);
//               const data = await response.json();
//               setProducts(data); // Update the state with the fetched products
//             } catch (error) {
//               console.error("Error fetching products:", error);
//             }
//           } else {
//             setProducts([]); // Clear products if no category is selected
//           }
//         };
        
//   const handleProductAdd = (productId) => {
//     const product = products.find((p) => p.id === productId);
//     if (product) {
//       setInvoiceDetails([...invoiceDetails, product]);
//     }
//   };

//   const handleRemoveProduct = (index) => {
//     const updatedInvoice = [...invoiceDetails];
//     updatedInvoice.splice(index, 1);
//     setInvoiceDetails(updatedInvoice);
//   };

//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({ ...formData, [name]: value });

//     // Check for existing customer when phone number changes
//     if (name === "phoneNumber") {
//       const customer = mockInvoiceData.find((item) => item.phoneNumber === value);
//       if (customer) {
//         setFormData({ ...formData, phoneNumber: value, customerName: customer.customerName });
//         setIsInputDisabled(true);
//       } else {
//         setFormData({ ...formData, phoneNumber: value, customerName: "" });
//       }
//     }
//   };
//   const handleQuantityChange = (index, value) => {
//     const updatedInvoice = [...invoiceDetails];
//     const quantity = parseInt(value) || 0; // Ensure it's a valid number
//     updatedInvoice[index].quantity = quantity;
//     updatedInvoice[index].amount = quantity * updatedInvoice[index].sellingPrice;
//     setInvoiceDetails(updatedInvoice);
//   };
  
//   const handlePreview = () => {
//     setModalOpen(true);
//   };

//   const handleConfirm = () => {
//     console.log("Invoice Saved:", {
//       ...formData,
//       invoiceDetails,
//     });
//     setModalOpen(false);
//     setFormData({ phoneNumber: "", customerName: "", dateTime: new Date().toLocaleString() });
//     setInvoiceDetails([]);
//   };

//   return (
//     <div className="max-w-screen-lg mx-auto mr-4">
//       <h1 className="text-3xl font-bold mb-6 text-center">Pharmacy Invoice</h1>
//       {/* Customer Details */}
//       <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
//         <div>
//           <label className="block text-sm font-medium mb-1">Phone Number</label>
//           <input
//             type="tel"
//             name="phoneNumber"
//             value={formData.phoneNumber}
//             onChange={handleInputChange}
//             className="w-full border border-gray-300 px-3 py-2 rounded"
//             required
//           />
//         </div>
//         <div>
//           <label className="block text-sm font-medium mb-1">Customer Name</label>
//           <input
//             type="text"
//             name="customerName"
//             value={formData.customerName}
//             onChange={handleInputChange}
//             className="w-full border border-gray-300 px-3 py-2 rounded"
//             // disabled={!!formData.customerName} // Disable if auto-filled
//             // disabled={formData.customerName && isAutoFilled}
//             disabled={isInputDisabled}
//             required
//           />
//         </div>
//         <div>
//           <label className="block text-sm font-medium mb-1">Date & Time</label>
//           <input
//             type="text"
//             value={formData.dateTime}
//             className="w-full border border-gray-300 px-3 py-2 rounded bg-gray-100"
//             disabled
//           />
//         </div>
//       </div>

//       {/* Category and Product Selection */}
//       <div className="flex flex-wrap gap-4 mb-6">
//         <div className="w-full md:w-1/3">
//           <label className="block text-sm font-medium mb-1">Select Category</label>
//           <select
//             className="w-full border border-gray-300 px-3 py-2 rounded"
//             value={selectedCategory}
//             onChange={handleCategoryChange}>
//             <option value="">-- Select --</option>
//             {categories.map((category) => (
//               <option key={category.id} value={category.id}>
//                 {category.category_name}
//               </option>
//             ))}
//           </select>
//         </div>
//       </div>
//     <div>
//         <h2 className="text-xl font-bold mb-2">Product Details</h2>
//         <table className="w-full border-collapse border border-gray-300">
//           <thead>
//             <tr className="bg-gray-100">
//               <th className="border border-gray-300 px-4 py-2">Product Name</th>
//               <th className="border border-gray-300 px-4 py-2">Batch No</th>
//               <th className="border border-gray-300 px-4 py-2">Expiry Date</th>
//               <th className="border border-gray-300 px-4 py-2">MRP</th>
//               <th className="border border-gray-300 px-4 py-2">GST</th>
//               <th className="border border-gray-300 px-4 py-2">Quantity</th>
//               <th className="border border-gray-300 px-4 py-2">Amount</th>
//               <th className="border border-gray-300 px-4 py-2">Action</th>
//             </tr>
//           </thead>
//           <tbody>
//             {invoiceDetails.map((product, index) => (
//               <tr key={index}>
//                 <td className="border border-gray-300 px-4 py-2">{product.name}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.batchNo}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.expDate}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.mrp}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.gst}%</td>
//                 <td className="border border-gray-300 px-4 py-2">  
//                 <input
//                     type="number"
//                     min="1"
//                     value={product.quantity}
//                     onChange={(e) => handleQuantityChange(index, e.target.value)}
//                     className="w-12 border border-gray-300 px-2 py-1 rounded [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
//                   />
//                 </td>
//                 {/* <td className="border border-gray-300 px-4 py-2">{product.sellingPrice}</td> */}
//                 <td className="border border-gray-300 px-4 py-2">
//                   {calculateAmount(product.quantity, product.sellingPrice)}
//                 </td>
//                 <td className="border border-gray-300 px-4 py-2">
//                   <button
//                     onClick={() => handleRemoveProduct(index)}
//                     className="text-red-500 hover:underline">
//                     Remove
//                   </button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//         {selectedCategory && (
//           <div className="mt-4">
//             <label className="block text-sm font-medium mb-1">Select Product</label>
//             <select
//   className="w-full border border-gray-300 px-3 py-2 rounded"
//   onChange={(e) => handleProductAdd(e.target.value)}
// >
//   <option value="">-- Select --</option>
//   {products.map((product) => (
//     <option key={product.id} value={product.id}>
//       {product.name}
//     </option>
//   ))}
// </select>

//           </div>
//         )}
//       </div>


//       {/* Preview and Submit */}
//       <div className="mt-6 text-right">
//         <button
//           onClick={handlePreview}
//           className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 mr-4"
//         >
//           Preview
//         </button>
//       </div>

//       {/* Modal */}
//         {/* {modalOpen && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
//           <div className="bg-white rounded-lg shadow-lg w-1/2">
//             <div className="p-4">
//               <h2 className="text-xl font-bold mb-4">Invoice Preview</h2>
//               <p className="mb-4"><strong>Customer Name:</strong> {formData.customerName}</p>
//               <p className="mb-4"><strong>Phone Number:</strong> {formData.phoneNumber}</p>
//               <p className="mb-4"><strong>Date & Time:</strong> {formData.dateTime}</p>
//               <table className="w-full border-collapse border border-gray-300">
//                 <thead>
//                   <tr className="bg-gray-100">
//                     <th className="border border-gray-300 px-4 py-2">Product Name</th>
//                     <th className="border border-gray-300 px-4 py-2">Batch No</th>
//                     <th className="border border-gray-300 px-4 py-2">Expiry Date</th>
//                     <th className="border border-gray-300 px-4 py-2">MRP</th>
//                     <th className="border border-gray-300 px-4 py-2">GST</th>
//                     <th className="border border-gray-300 px-4 py-2">Quantity</th>
//                     <th className="border border-gray-300 px-4 py-2">Selling Price</th>
//                     <th className="border border-gray-300 px-4 py-2">Amount</th>
//                   </tr>
//                 </thead>
//                 <tbody>
//                   {invoiceDetails.map((product, index) => (
//                     <tr key={index}>
//                       <td className="border border-gray-300 px-4 py-2">{product.name}</td>
//                       <td className="border border-gray-300 px-4 py-2">{product.batchNo}</td>
//                       <td className="border border-gray-300 px-4 py-2">{product.expDate}</td>
//                       <td className="border border-gray-300 px-4 py-2">{product.mrp}</td>
//                       <td className="border border-gray-300 px-4 py-2">{product.gst}%</td>
//                       <td className="border border-gray-300 px-4 py-2">{product.quantity}</td>
//                       <td className="border border-gray-300 px-4 py-2">{product.sellingPrice}</td>
//                       <td className="border border-gray-300 px-4 py-2">
//                         {calculateAmount(product.quantity, product.sellingPrice)}
//                       </td>
//                     </tr>
//                   ))}
//                 </tbody>
//               </table>
//               <div className="mt-4 flex justify-end gap-4">
//                 <button
//                   onClick={() => setModalOpen(false)}
//                   className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
//                 >
//                   Cancel
//                 </button>
//                 <button
//                   onClick={handleConfirm}
//                   className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
//                 >
//                   Confirm
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )} */}
//       {modalOpen && (
//   <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
//     <div className="bg-white rounded-lg shadow-lg w-3/4 max-h-screen overflow-hidden">
//       <div className="p-4 flex justify-between items-center border-b">
//         <h2 className="text-xl font-bold">Invoice Preview</h2>
//         <button
//           onClick={() => setModalOpen(false)}
//           className="text-gray-600 hover:text-gray-800">
//           &times;
//         </button>
//       </div>
//       <div className="p-4 overflow-auto max-h-[75vh]">
//         <p className="mb-4"><strong>Customer Name:</strong> {formData.customerName}</p>
//         <p className="mb-4"><strong>Phone Number:</strong> {formData.phoneNumber}</p>
//         <p className="mb-4"><strong>Date & Time:</strong> {formData.dateTime}</p>
//         <table className="w-full border-collapse border border-gray-300">
//           <thead>
//             <tr className="bg-gray-100">
//               <th className="border border-gray-300 px-4 py-2">Product Name</th>
//               <th className="border border-gray-300 px-4 py-2">Batch No</th>
//               <th className="border border-gray-300 px-4 py-2">Expiry Date</th>
//               <th className="border border-gray-300 px-4 py-2">MRP</th>
//               <th className="border border-gray-300 px-4 py-2">GST</th>
//               <th className="border border-gray-300 px-4 py-2">Quantity</th>
//               <th className="border border-gray-300 px-4 py-2">Selling Price</th>
//               <th className="border border-gray-300 px-4 py-2">Amount</th>
//             </tr>
//           </thead>
//           <tbody>
//             {invoiceDetails.map((product, index) => (
//               <tr key={index}>
//                 <td className="border border-gray-300 px-4 py-2">{product.name}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.batchNo}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.expDate}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.mrp}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.gst}%</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.quantity}</td>
//                 <td className="border border-gray-300 px-4 py-2">{product.sellingPrice}</td>
//                 <td className="border border-gray-300 px-4 py-2">
//                   {calculateAmount(product.quantity, product.sellingPrice)}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>
//       <div className="p-4 border-t flex justify-end gap-4">
//         <button
//           onClick={() => setModalOpen(false)}
//           className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
//           Edit
//         </button>
//         <button
//           onClick={handleConfirm}
//           className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
//           Confirm
//         </button>
//       </div>
//     </div>
//   </div>
// )}
// </div>
//   );
// };

// export default Billing;